;+
; NAME:
;   PlotEveDimmingCatalogStatistics
;
; PURPOSE:
;   Characterize the parameterization output of FindDimmingInEve. 
;
; INPUTS:
;   None
;
; OPTIONAL INPUTS:
;   filePathAndName [string]: The path to and filename of the DimmingParameters.sav file generated by FindDimmingInEve.pro. 
;                             Default: '/Users/' + getenv('username') + 
;                             '/Dropbox/Research/Postdoc_LASP/Analysis/Coronal Dimming/Automatic Dimming Database/DimmingParameters.sav'
;
; KEYWORD PARAMETERS:
;   DAR_BACKGROUND: Set this to make the background transparent and use plot colors with high contrast against dark backgrounds
;   VERBOSE: Set this to print processing messages to console
;
; OUTPUTS:
;   Various plots showing the statistical characteristics of dimming found in EVE
;
; OPTIONAL OUTPUTS:
;   None
;
; RESTRICTIONS:
;   Requires that the DimmingParameters.sav file from FindDimmingInEve has been generated
;
; EXAMPLE:
;   Just run it!
;
; MODIFICATION HISTORY:
;   2016-10-10: James Paul Mason: Wrote script.
;-
PRO PlotEveDimmingCatalogStatistics, filePathAndName = filePathAndName, $
                                     DARK_BACKGROUND = DARK_BACKGROUND, VERBOSE = VERBOSE

; Defaults
; FIXME: Change default filename back to DimmingParameters once it has been concatenated
IF filePathAndName EQ !NULL THEN BEGIN
  ; FIXME: Temporary fix to concatenate multiple files
  filePathAndName = file_search('/Users/' + getenv('username') + $
                                '/Dropbox/Research/Postdoc_LASP/Analysis/Coronal Dimming/Automatic Dimming Database/DimmingParameters*.sav', count = numFiles)
  filePathAndName = shift(filePathAndName, -1) ; Put the newest events at the end
  ;filePathAndName = '/Users/' + getenv('username') + '/Dropbox/Research/Postdoc_LASP/Analysis/Coronal Dimming/Automatic Dimming Database/DimmingParameters copy.sav'
ENDIF

DARK_BACKGROUND = 1
IF keyword_set(DARK_BACKGROUND) THEN BEGIN
  foregroundBlackOrWhite = 'white'
  backgroundColor = 'white smoke' ; Will be used as the transparency mask for the png
  blueColor = 'deep sky blue'
  yellowColor = 'gold'
  redColor = 'deep pink'
  greenColor = 'chartreuse'
ENDIF ELSE BEGIN
  foregroundBlackOrWhite = 'black'
  backgroundColor = 'white'
  blueColor = 'dodger blue'
  yellowColor = 'golenrod'
  redColor = 'crimson'
  greenColor = 'green'
ENDELSE
saveloc = '/Users/' + getenv('username') + '/Dropbox/Research/Postdoc_LASP/Analysis/Coronal Dimming/Automatic Dimming Database/Analysis Plots/'

; Load the dimming parameterization data
dimmingParametersTemp = !NULL
FOR fileIndex = 0, numFiles - 1 DO BEGIN
  restore, filePathAndName[fileIndex]
  dimmingParametersTemp = [dimmingParametersTemp, dimmingParameters]
ENDFOR
dimmingParameters = temporary(dimmingParametersTemp)
dimmingParameters = JPMAddTagsToStructure(dimmingParameters, 'EventStartTimeJd', 'double')
dimmingParameters.EventStartTimeJd = JPMiso2jd(dimmingParameters.eventStartTime)

; Flip slope definition
dimmingParameters.slope = -dimmingParameters.slope

; Load the CDAW data
restore, '/Users/' + getenv('username') + '/Dropbox/Research/Data/CDAW/Historical CME Mass And Speed.sav'
cmeTimeJd = JPMiso2jd(cmeTimeIso)

; Basic statistics 
meanDepths = mean(dimmingParameters.depth, DIMENSION = 2, /NAN)
stddevDepths = stddev(dimmingParameters.depth, DIMENSION =  2, /NAN)
skewDepths = skewness(dimmingParameters.depth, DIMENSION =  2, /NAN)
kurtosisDepths = kurtosis(dimmingParameters.depth, DIMENSION = 2, /NAN)
medianDepths = median(dimmingParameters.depth, DIMENSION = 2)

; Single wavelength histograms
FOR lineIndex = 0, 39 DO BEGIN
  depthHistogram = histogram(dimmingParameters.depth[lineIndex], min = 0, binSize = 0.5, locations = xbin, /NAN)
  w1 = window(BACKGROUND_COLOR = backgroundColor, /BUFFER)
  p1 = barplot(xbin, depthHistogram, WIDTH = 1, /HISTOGRAM, /CURRENT, $ 
               FONT_COLOR = foregroundBlackOrWhite, FILL_COLOR = blueColor, $
               TITLE = dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth Histogram', $
               XTITLE = 'Depth [%]', XRANGE = [0, 5], XCOLOR = foregroundBlackOrWhite, $
               YTITLE = '#', YCOLOR = foregroundBlackOrWhite)
  t1a = text(0.18, 0.80, 'n = ' + JPMPrintNumber(n_elements(dimmingParameters), /NO_DECIMALS), COLOR = foregroundBlackOrWhite)
  t1b = text(0.72, 0.8, 'Mean = ' + JPMPrintNumber(meanDepths[lineIndex]), COLOR = foregroundBlackOrWhite)
  t1c = text(0.72, 0.76, '$\sigma$ = ' + JPMPrintNumber(stddevDepths[lineIndex]), COLOR = foregroundBlackOrWhite)
  t1d = text(0.72, 0.72, 'Skew = ' + JPMPrintNumber(skewDepths[lineIndex]), COLOR = foregroundBlackOrWhite)
  t1e = text(0.72, 0.68, 'Kurtosis = ' + JPMPrintNumber(kurtosisDepths[lineIndex]), COLOR = foregroundBlackOrWhite)
  p1.save, saveloc + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth Histogram.png', /TRANSPARENT 
ENDFOR

; flareInterrupt flag filtered out 
flareInterrupt = dimmingParameters.flareInterrupt
goodIndices = where(flareInterrupt EQ 0, numNoFlareInterrupt)

; Statistics with flareInterrupt filtered out
meanDepthsNoFlareInterrupt = mean(dimmingParameters[goodIndices].depth, DIMENSION = 2, /NAN)
stddevDepthsNoFlareInterrupt = stddev(dimmingParameters[goodIndices].depth, DIMENSION =  2, /NAN)
skewDepthsNoFlareInterrupt = skewness(dimmingParameters[goodIndices].depth, DIMENSION =  2, /NAN)
kurtosisDepthsNoFlareInterrupt = kurtosis(dimmingParameters[goodIndices].depth, DIMENSION = 2, /NAN)

; Single wavelength histograms -- flareInterrupt filtered out
depthNoFlareInterruptHistogram = histogram(dimmingParameters[goodIndices].depth[lineIndex], min = 0, binSize = 0.5, locations = xbinNoFlareInterrupt, /NAN)
w1 = window(BACKGROUND_COLOR = backgroundColor, /BUFFER)
p1 = barplot(xbinNoFlareInterrupt, depthNoFlareInterruptHistogram, WIDTH = 1, /HISTOGRAM, /CURRENT, $
             FONT_COLOR = foregroundBlackOrWhite, FILL_COLOR = yellowColor, $
             TITLE = dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth (No Flare Interrupt) Histogram', $
             XTITLE = 'Depth [%]', XRANGE = [0, 5], XCOLOR = foregroundBlackOrWhite, $
             YTITLE = '#', YCOLOR = foregroundBlackOrWhite)
t1a = text(0.18, 0.80, 'n = ' + JPMPrintNumber(numNoFlareInterrupt, /NO_DECIMALS), COLOR = foregroundBlackOrWhite)
t1b = text(0.72, 0.8, 'Mean = ' + JPMPrintNumber(meanDepthsNoFlareInterrupt[lineIndex]), COLOR = foregroundBlackOrWhite)
t1c = text(0.72, 0.76, '$\sigma$ = ' + JPMPrintNumber(stddevDepthsNoFlareInterrupt[lineIndex]), COLOR = foregroundBlackOrWhite)
t1d = text(0.72, 0.72, 'Skew = ' + JPMPrintNumber(skewDepthsNoFlareInterrupt[lineIndex]), COLOR = foregroundBlackOrWhite)
t1e = text(0.72, 0.68, 'Kurtosis = ' + JPMPrintNumber(kurtosisDepthsNoFlareInterrupt[lineIndex]), COLOR = foregroundBlackOrWhite)
p1.save, saveloc + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth (No Flare Interrupt) Histogram.png', /TRANSPARENT

; Mean depth vs wavelength
w2 = window(BACKGROUND_COLOR = backgroundColor, /BUFFER)
p2 = plot(meanDepths[0:14], '2', /FILL_BACKGROUND, FILL_LEVEL = 0, /CURRENT, $ ;, DIMENSIONS = [1800, 600], $
          FONT_COLOR = foregroundBlackOrWhite, COLOR = foregroundBlackOrWhite, FILL_COLOR = redColor, $
          TITLE = 'Depth vs Wavelength', $
          XTITLE = 'Wavelength [Å]', XTICKNAME = dimmingParameters[0].eveLineCenters[0:14], XCOLOR = foregroundBlackOrWhite, $ 
          YTITLE = 'Mean Depth [%]', YCOLOR = foregroundBlackOrWhite)
p2.save, saveloc + 'Depth vs Wavelength.png', /TRANSPARENT

; Order wavelengths in increasing temperature
increasingTemperatureIndices = [11, 9, 1, 3, 4, 5, 6, 7, 8, 10, 12, 0, 2]
logT = [4.6999998, 4.7500000, 5.5700002, 5.8099999, 5.9899998, 6.0700002, 6.1300001, $
        6.1900001, 6.2700000, 6.3000002, 6.4299998, 6.8099999, 6.9699998]

; Mean depth vs temperature
w2 = window(BACKGROUND_COLOR = backgroundColor, /BUFFER)
p2 = plot(logT, meanDepths[increasingTemperatureIndices], '2', /FILL_BACKGROUND, FILL_LEVEL = 0, /CURRENT, $ ;, DIMENSIONS = [1800, 600], $
          FONT_COLOR = foregroundBlackOrWhite, COLOR = foregroundBlackOrWhite, FILL_COLOR = redColor, $
          TITLE = 'Depth vs Temperature', $
          XTITLE = 'Log Temperature [K]', XCOLOR = foregroundBlackOrWhite, $
          YTITLE = 'Mean Depth [%]', YCOLOR = foregroundBlackOrWhite)
p2.save, saveloc + 'Depth vs Temperature.png', /TRANSPARENT

; Fake correlation data 
fakeDataX = JPMrange(0., 0.004, npts = 309)
fakeDataY = !NULL
for i = 0, 308 DO fakeDataY = [fakeDataY, (500 + i) + (randomu(!NULL, /NORMAL) * 10)]
linFit = poly_fit(fakeDataX, fakeDataY, 2, YFIT = fakeYFit)

; Fake correlation plot
w3 = window(BACKGROUND_COLOR = backgroundColor, /BUFFER)
pccFake = correlate(fakeDataX, fakeDataY)
p3a = scatterplot(fakeDataX, fakeDataY, /CURRENT, $
                  /SYM_FILLED, SYM_COLOR = greenColor, FONT_COLOR = foregroundBlackOrWhite, $
                  TITLE = 'CDAW CME Speed vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Slope', $
                  XTITLE = 'Slope [% s$^{-1}$]', XCOLOR = foregroundBlackOrWhite, $
                  YTITLE = 'CME Speed [km s$^{-1}$]', YCOLOR = foregroundBlackOrWhite)
p3b = plot(fakeDataX, fakeYFit, /OVERPLOT, THICK = 3, COLOR = 'green')
t5a = text(0.18, 0.80, 'n = 309', COLOR = foregroundBlackOrWhite)
t5b = text(0.70, 0.80, 'PCC = ' + JPMPrintNumber(pccFake), COLOR = foregroundBlackOrWhite)
p3a.save, saveloc + 'CDAW CME Speed vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Slope fake.png', /TRANSPARENT

; Scatter plot of depth versus flare class with and without flareInterrupt
finiteDepthIndices = where(finite(dimmingParameters.depth[lineIndex]) EQ 1, numFiniteDepthIndices)
finiteSlopeIndices = where(dimmingParameters.slope[lineIndex] GT 0, numFiniteSlopeIndices)
pccDepthClass = correlate(dimmingParameters[finiteDepthIndices].depth[lineIndex], dimmingParameters[finiteDepthIndices].goesFlux, /DOUBLE)
pccDepthClassNoFlareInterrupt = correlate(dimmingParameters[CommonArrayElements(goodIndices, finiteDepthIndices, count = numGoodAndFiniteIndices)].depth[lineIndex], $
                                          dimmingParameters[CommonArrayElements(goodIndices, finiteDepthIndices)].goesFlux, /DOUBLE)
w4 = window(BACKGROUND_COLOR = backgroundColor, /BUFFER)
p4 = scatterplot(dimmingParameters.depth[lineIndex], dimmingParameters.goesFlux, /CURRENT, $
                 /SYM_FILLED, SYM_COLOR = blueColor, FONT_COLOR = foregroundBlackOrWhite, $
                 TITLE = 'GOES Flare Class vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth', $
                 XTITLE = 'Depth [%]', XCOLOR = foregroundBlackOrWhite, $
                 YTITLE = 'GOES Flare Class', /YLOG, YTICKNAME = ['C', 'M', 'X', ''], YCOLOR = foregroundBlackOrWhite)
p5 = scatterplot(dimmingParameters[CommonArrayElements(goodIndices, finiteDepthIndices)].depth[lineIndex], $
                                   dimmingParameters[CommonArrayElements(goodIndices, finiteDepthIndices)].goesFlux, /OVERPLOT, $
                 /SYM_FILLED, SYM_COLOR = yellowColor)
t4a = text(0.18, 0.80, 'n = ' + JPMPrintNumber(numFiniteDepthIndices, /NO_DECIMALS), COLOR = foregroundBlackOrWhite)
t4b = text(0.18, 0.76, 'n = ' + JPMPrintNumber(numGoodAndFiniteIndices, /NO_DECIMALS), COLOR = yellowColor)
t4c = text(0.90, 0.80, 'PCC All = ' + JPMPrintNumber(pccDepthClass), ALIGNMENT = 1, COLOR = foregroundBlackOrWhite)
t4d = text(0.90, 0.76, 'PCC No Flare Interrupt = ' + JPMPrintNumber(pccDepthClassNoFlareInterrupt), ALIGNMENT = 1, COLOR = yellowColor)
p4.save, saveloc + 'GOES Flare Class vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth.png', /TRANSPARENT

; Match CMEs to dimmings -- TODO: Improve this method somehow?
associatedCmeIndex = fltarr(n_elements(dimmingParameters))
FOR eventIndex = 0, n_elements(dimmingParameters) - 1 DO BEGIN
  closestCmeIndex = closest(dimmingParameters[eventIndex].EventStartTimeJd, cmeTimeJd, /UPPER)
  IF abs(dimmingParameters[eventIndex].EventStartTimeJd - cmeTimeJd[closestCmeIndex]) * 24. LT 2. THEN $
    associatedCmeIndex[eventIndex] = closestCmeIndex ELSE associatedCmeIndex[eventIndex] = !VALUES.F_NAN
ENDFOR

; Filter for associated CME, available mass, and available depth
dimmingWithCmeIndices = where(finite(associatedCmeIndex) EQ 1, numAssociatedCmes)
finiteMassIndices = where(finite(mass) EQ 1)
finiteAssociatedMassIndices = CommonArrayElements(finiteMassIndices, dimmingWithCmeIndices)
finiteMassAndDepthAssociatedIndices = CommonArrayElements(finiteAssociatedMassIndices, finiteDepthIndices, count = numFiniteMassAndDepthAssociated)

; Filter for associated CME, available mass above 1e15 g, and available depth
finiteHighMassIndices = where(finite(mass) EQ 1 AND mass GT 1e15)
finiteAssociatedHighMassIndices = CommonArrayElements(finiteHighMassIndices, dimmingWithCmeIndices)
finiteHighMassAndDepthAssociatedIndices = CommonArrayElements(finiteAssociatedHighMassIndices, finiteDepthIndices, count = numFiniteHighMassAndDepthAssociated)

; Scatter plot of sqrt(depth) vs CME mass
pccDepthMass = correlate(sqrt(dimmingParameters[finiteMassAndDepthAssociatedIndices].depth[lineIndex]), mass[finiteMassAndDepthAssociatedIndices], /DOUBLE) 
w6 = window(BACKGROUND_COLOR = backgroundColor, DIMENSIONS = [750, 500], /BUFFER)
p6 = scatterplot(sqrt(dimmingParameters[finiteMassAndDepthAssociatedIndices].depth[lineIndex]), mass[finiteMassAndDepthAssociatedIndices], /CURRENT, $
                 /SYM_FILLED, SYM_COLOR = greenColor, FONT_COLOR = foregroundBlackOrWhite, $
                 TITLE = 'CDAW CME Mass vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth', $
                 XTITLE = '(Depth [%])$^{1/2}$', XCOLOR = foregroundBlackOrWhite, $
                 YTITLE = 'CME Mass [g]', YCOLOR = foregroundBlackOrWhite)
t6a = text(0.18, 0.80, 'n = ' + JPMPrintNumber(numFiniteMassAndDepthAssociated, /NO_DECIMALS), COLOR = foregroundBlackOrWhite)
t6b = text(0.90, 0.80, 'PCC = ' + JPMPrintNumber(pccDepthMass), ALIGNMENT = 1, COLOR = greenColor)
p6.save, saveloc + 'CDAW CME Mass vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth.png', /TRANSPARENT

; Scatter plot of sqrt(depth) vs high CME masses (> 1e15 g)
pccDepthHighMass = correlate(sqrt(dimmingParameters[finiteHighMassAndDepthAssociatedIndices].depth[lineIndex]), $
                             mass[finiteHighMassAndDepthAssociatedIndices], /DOUBLE)
w7 = window(BACKGROUND_COLOR = backgroundColor, DIMENSIONS = [750, 500], /BUFFER)
p7 = scatterplot(sqrt(dimmingParameters[finiteHighMassAndDepthAssociatedIndices].depth[lineIndex]), mass[finiteHighMassAndDepthAssociatedIndices], /CURRENT, $
                 /SYM_FILLED, SYM_COLOR = greenColor, FONT_COLOR = foregroundBlackOrWhite, $
                 TITLE = 'CDAW CME High Mass vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth', $
                 XTITLE = '(Depth [%])$^{1/2}$', XCOLOR = foregroundBlackOrWhite, $
                 YTITLE = 'CME Mass [g]', YCOLOR = foregroundBlackOrWhite)
t7a = text(0.18, 0.80, 'n = ' + JPMPrintNumber(numFiniteHighMassAndDepthAssociated, /NO_DECIMALS), COLOR = foregroundBlackOrWhite)
t7b = text(0.90, 0.80, 'PCC = ' + JPMPrintNumber(pccDepthHighMass), ALIGNMENT = 1, COLOR = greenColor)
p7.save, saveloc + 'CDAW CME High Mass vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Depth.png', /TRANSPARENT

; Filter for associated CME, available speed, and available slope
finiteSpeedIndices = where(finite(speed) EQ 1)
finiteAssociatedSpeedIndices = CommonArrayElements(finiteSpeedIndices, dimmingWithCmeIndices)
finiteSpeedAndSlopeAssociatedIndices = CommonArrayElements(finiteAssociatedSpeedIndices, finiteSlopeIndices, count = numFiniteSpeedAndSlopeAssociated)

; Scatter plot of speed vs CME speed
pccSlopeSpeed = correlate(dimmingParameters[finiteSpeedAndSlopeAssociatedIndices].slope[lineIndex], speed[finiteSpeedAndSlopeAssociatedIndices], /DOUBLE)
w8 = window(BACKGROUND_COLOR = backgroundColor, /BUFFER)
p8 = scatterplot(dimmingParameters[finiteSpeedAndSlopeAssociatedIndices].slope[lineIndex], speed[finiteSpeedAndSlopeAssociatedIndices], /CURRENT, $
                 /SYM_FILLED, SYM_COLOR = redColor, FONT_COLOR = foregroundBlackOrWhite, $
                 TITLE = 'CDAW CME Speed vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Slope', $
                 XTITLE = 'Slope [% s$^{-1}$]', XCOLOR = foregroundBlackOrWhite, $
                 YTITLE = 'CME Speed [km s$^{-1}$]', YCOLOR = foregroundBlackOrWhite)
t8a = text(0.18, 0.80, 'n = ' + JPMPrintNumber(numFiniteSpeedAndSlopeAssociated, /NO_DECIMALS), COLOR = foregroundBlackOrWhite)
t8b = text(0.90, 0.80, 'PCC = ' + JPMPrintNumber(pccSlopeSpeed), ALIGNMENT = 1, COLOR = redColor)
p8.save, saveloc + 'CDAW CME Speed vs ' + dimmingParameters[0].eveLineCenters[lineIndex] + ' Å Slope.png', /TRANSPARENT

END